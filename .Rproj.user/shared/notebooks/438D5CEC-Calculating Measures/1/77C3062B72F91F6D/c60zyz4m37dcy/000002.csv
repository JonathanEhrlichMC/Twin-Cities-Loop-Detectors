"0","corridor_wrap <- function(corridor, year, ref_period_start, ref_period_end) {"
"0","  "
"0","  sensor_summary <- function(sensor, corridor, year, ref_period_start, ref_period_end) {"
"0","  library(tidyverse)"
"0","  library(data.table)"
"0","  library(lubridate)"
"0","detector_config <- data.table(fread('Configuration Data/Configuration of Metro Detectors 2019-01-08.csv'))"
"0","detector_select <- detector_config[Detector_name == sensor] # Select only the relevant sensor"
"0","detector_field <- data.table(detector_select %>% select(Detector_name, Detector_field, distance), key = ""Detector_name"") # Select only field length and sensor name  "
"0","  sensor_var <- sensor"
"0","  corridor_var <- corridor"
"0","  year_var <- year"
"0","  ref_period_start <- ref_period_start"
"0","  ref_period_end <- ref_period_end"
"0","  interval_length <- 20 # 20 30-second periods in the interval (10-minutes)"
"0","csv_path <- paste('Measures Data/', year_var, '/', corridor_var, '/', year_var, ' 10-minute Interval Measures ', sensor_var, '.csv', sep = '')"
"0","v_sensor <- fread(paste('Volume-Occupancy Data/', year_var, '/', corridor_var, '/Sensor ', sensor_var, ' v30.csv', sep = ''))"
"0","c_sensor <- fread(paste('Volume-Occupancy Data/', year_var, '/', corridor_var, '/Sensor ', sensor_var, ' c30.csv', sep = ''))"
"0","cv <- left_join(v_sensor, c_sensor, by = c('Date', 'Time', 'Sensor'))"
"0","times <- as.data.frame(seq(from = as.POSIXct('00:00:00', format = '%H:%M:%S'), to = as.POSIXct('23:59:30', format = '%H:%M:%S'), by = 30))"
"0","times_tidy <- times %>%"
"0","  mutate(Time = times[[1]]) %>%"
"0","  mutate(Time = format(Time, format = '%H:%M:%S')) %>%"
"0","  select(Time) %>%"
"0","  mutate(Time_id = row_number()) %>%"
"0","  mutate(Interval = cut(Time_id, seq(0, 2880, 20)))"
"0","cv_tidy <- cv %>%"
"0","  mutate(Time = as.character(Time),"
"0","         Sensor = as.character(Sensor)) %>%"
"0","  filter(Time != 'Entire day missing') %>%"
"0","  mutate(Value.x = as.numeric(Value.x),"
"0","         Value.y = as.numeric(Value.y))"
"0","cv_intervals <- left_join(cv_tidy, times_tidy, by = 'Time')"
"0","# Classify intervals as containing data or missing data"
"0","null_classifier <- data.table(cv_intervals %>%"
"0","    mutate(Date2 = Date,"
"0","         Time2 = Time) %>%"
"0","    unite(Date_Time, Date2, Time2, sep = ' ') %>%"
"0","    rename(Volume = Value.x,"
"0","         Occupancy = Value.y) %>%"
"0","    select(-Ext.x, -Ext.y, -Time_id) %>%"
"0","    mutate(Date_Time = as_datetime(Date_Time),"
"0","         Volume_status = ifelse(is.na(Volume), 1, 0),"
"0","         Occupancy_status = ifelse(is.na(Occupancy), 1, 0)), key = c(""Date"", ""Interval""))"
"0","# Count nulls in period"
"0","# microbenchmark(null_count <- null_classifier %>%"
"0","#   group_by(Date, Interval) %>%"
"0","#   mutate(Interval_length = length(Interval),"
"0","#          Start_time = min(Date_Time),"
"0","#          End_time = max(Date_Time),"
"0","#          Volume_total_in_period = sum(Volume, na.rm = T),"
"0","#          Volume_count_of_nulls = sum(Volume_status),"
"0","#          Occupancy_total_in_period = sum(Occupancy, na.rm = T),"
"0","#          Occupancy_count_of_nulls = sum(Occupancy_status)) %>%"
"0","#   ungroup(),"
"0","#   times = 3)"
"0","# Compute total amount of missing data"
"0","null_count <- null_classifier[,"
"0","                                   .(Start_time = min(Date_Time),"
"0","                                     End_time = max(Date_Time),"
"0","                                     Volume_total_in_period = sum(Volume, na.rm = T),"
"0","                                     Volume_count_of_nulls = sum(Volume_status),"
"0","                                     Occupancy_total_in_period = sum(Occupancy, na.rm = T),"
"0","                                     Occupancy_count_of_nulls = sum(Occupancy_status)),"
"0","                                   by = .(Date, Interval)]"
"0","# Join percentage variables back to raw data"
"0","null_count_full <- null_classifier[null_count]"
"0","# Prep for median interpolation"
"0","null_prep <- data.table(null_count_full[, Volume_percent_interpolated_in_interval := Volume_count_of_nulls/interval_length*100][, Occupancy_percent_interpolated_in_interval := Occupancy_count_of_nulls/interval_length*100], key = c(""Date"", ""Interval""))"
"0","# Create columns with period medians"
"0","period_medians <- data.table(null_prep[,"
"0","                           .(Volume_median = median(Volume, na.rm = T),"
"0","                             Occupancy_median = median(Occupancy, na.rm = T)),"
"0","                           by = .(Date, Interval)], key = c(""Date"", ""Interval""))"
"0","  "
"0","vc_medians <- null_prep[period_medians]"
"0","# Interpolate NULLs with median"
"0","vc_interpolated <- vc_medians[, Volume_interpolated_nulls := ifelse(is.na(Volume), Volume_median, Volume)][, Occupancy_interpolated_nulls := ifelse(is.na(Occupancy), Occupancy_median, Occupancy)]"
"0","# Sum volume and occupancy to 10-minute period totals"
"0","vc_summed <- data.table(vc_interpolated[,"
"0","                             .(Volume_with_interpolation = sum(Volume_interpolated_nulls),"
"0","                               Occupancy_with_interpolation = sum(Occupancy_interpolated_nulls)),"
"0","                             by = .(Date, Interval)], key = c(""Date"", ""Interval""))"
"0","# Select only needed variables, and aggregate up to 10-minute periods"
"0","vc_pared <- data.table(vc_interpolated %>% select(Sensor, Date, Start_time, End_time, Interval, Volume_percent_interpolated_in_interval, Occupancy_percent_interpolated_in_interval) %>% unique(), key = c(""Date"", ""Interval""))"
"0","# Join needed variables to aggregated volume and occupancy"
"0","vc_periods <- data.table(vc_pared[vc_summed], key = ""Sensor"")"
"0","vc_field <- vc_periods[data.table(detector_field, key = ""Detector_name"")]"
"0","# Calculate speed!"
"0","speed <- data.table(vc_field[, Speed := ifelse(Volume_with_interpolation != 0, (Volume_with_interpolation*6*Detector_field)/(5280*(Occupancy_with_interpolation/(1800*20))), 0)], key = ""Sensor"") # Vehicles per hour = Volume in 10 min * 6; Occupancy (per hour is assumed to be same as per 10-min interval, since it's a %) = Occupancy in 10 min interval/(Total scans in 30 seconds (1800) * 20 30-sec periods in one 10-min interval) - note that these coefficients do NOT need to be changed if interval changes, since an interval change results in an increase of the multiplier for volume (increase of intervals in an hour), but a DECREASE of the denominator (occupancy's) multiplier"
"0","# Calculate reference speed"
"0","speed_time <- speed %>%"
"0","  separate(Start_time, into = c('date', 'Start_time'), sep = ' ') %>%"
"0","  separate(End_time, into = c('date', 'End_time'), sep = ' ')"
"0","#Get start time as an increment of the 24 hours of the day"
"0","# Get peak time speeds only"
"0","ref_speed <- speed_time[, Start_time_h := as.numeric(hms(Start_time))/3600][Start_time_h <= ref_period_end & Start_time_h >= ref_period_start, ][, Ref_speed := median(Speed, na.rm = T)][, Ref_speed_90 := Ref_speed * 0.9][, Ref_speed_av := mean(Speed, na.rm = T)]"
"0","ref_spd <- data.table(ref_speed %>%"
"0","  separate(Date, into = c('Year', 'Month_day'), sep = 4) %>%"
"0","  select(Ref_speed, Ref_speed_90, Ref_speed_av, Sensor) %>%"
"0","  unique(), key = ""Sensor"")"
"0","measures_df <- speed[ref_spd]"
"0","#measures_field <- left_join(measures_df, detector_field, by = c(""Sensor"" = ""Detector_name""))"
"0","measures <- measures_df[, Delay := ifelse(Ref_speed_90 < Speed, 0, (Ref_speed_90-Speed)*Volume_with_interpolation)][, Ref_speed_less_current_speed := ifelse(Ref_speed_90 < Speed, 0, (Ref_speed_90-Speed))][, VMT := Volume_with_interpolation*distance]"
"0","fwrite(measures, csv_path)"
"0","  }"
"0","  "
"0","  #------------------"
"0","  # sensory_summary function delineation ends - below begins iteration of function over corridor"
"0","  #-----------------------"
"0","corridor_vc <- as_tibble(list.files(paste('Volume-Occupancy Data/', year, '/', corridor, sep = ''))) %>%"
"0","  separate(value, into = c('Prefix', 'sensor'), sep = ' ') %>%"
"0","  select(sensor) %>%"
"0","  unique() %>%"
"0","  mutate(corridor = corridor,"
"0","         year = as.character(year),"
"0","         ref_period_start = ref_period_start,"
"0","         ref_period_end = ref_period_end)"
"0","sensor_list <- split(corridor_vc, seq(nrow(corridor_vc)))"
"0","num_cores <- detectCores() # Check how many cores are present - trying to use more than this many won't provide any benefit"
"0","registerDoParallel(num_cores)"
"0","length_sensor_l <- c(1:length(sensor_list))"
"0","foreach (i = seq_along(length_sensor_l)) %dopar% {"
"0","  do.call(sensor_summary, sensor_list[[i]])"
"0","  }"
"0","#purrr::map(length_sensor_l, function(i) do.call(sensor_summary, sensor_list[[i]]))"
"0","}"
