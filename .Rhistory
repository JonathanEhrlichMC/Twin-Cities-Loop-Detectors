config_sp <- SpatialPointsDataFrame(config[,12:11], config)
+ellps=WGS84 +towgs84=0,0,0"
crs(config_sp) <- "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs
+ellps=WGS84 +towgs84=0,0,0"
leaflet(config_sp) %>%
addCircles(popup = ~Detector_name) %>%
addTiles()
plot(config_sp)
config_sp <- SpatialPointsDataFrame(config[,11:12], config)
crs(config_sp) <- "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs
+ellps=WGS84 +towgs84=0,0,0"
plot(config_sp)
st_write(config_sp, "Configuration Data/Config Sp Test.shp")
writeOGR(config_sp, "Configuration Data/Config Sp Test.shp")
?writeOGR
writeOGR(config_sp, "Configuration Data", "Config Sp Test.shp")
writeOGR(config_sp, "Configuration Data", "Config Sp Test.shp", "ESRI Shapefile")
ln1 <- Line(matrix(runif(6), ncol=2))
str(ln1)
View(ln1)
ln_matrix <- matrix(runif(6), ncol = 2)
View(ln_matrix)
View(config)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon)
library(tidyverse)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon)
View(config_ln)
?split
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
split(Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
split(f = Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
split(as.factor(Corridor_ID))
?split
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.factor(Corridor_ID)) %>%
split(Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.factor(Corridor_ID)) %>%
split($Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.factor(Corridor_ID)) %>%
split(~$Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.factor(Corridor_ID)) %>%
split(config$Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.factor(Corridor_ID)) %>%
group_by(Corridor_ID)
config_lines <- Line(config_ln)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.factor(Corridor_ID))
config_split <- split(config_ln, config$Corridor_ID)
View(config_ln)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon)
config_split <- split(config_ln, config$Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = factor(Corridor_ID, levels = Corridor_ID))
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = factor(Corridor_ID))
config_split <- split(config_ln, config$Corridor_ID)
length(config$Corridor_ID)
length(config$Rnode_lat)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon)
length(config$Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.character(Corridor_ID))
length(config$Corridor_ID)
View(config_ln)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.character(Corridor_ID)) %>%
group_by(Corridor_ID) %>%
mutate(Corridor_number = row_number())
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.character(Corridor_ID)) %>%
group_by(Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon) %>%
mutate(Corridor_ID = as.character(Corridor_ID)) %>%
ungroup()
length(config$Corridor_ID)
config$Corridor_ID
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Corridor_index, Rnode_lat, Rnode_lon)
config_split <- split(config_ln, config_ln$Corridor_ID)
config_1 <- config_split[[1]]
config_1 <- Lines(config_split[[1]], ID = config_split[[1]]@Corridor_ID)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Corridor_ID, Rnode_lat, Rnode_lon)
config_split <- split(config_ln, config_ln$Corridor_ID)
config_1 <- config_split[[1]]
config_1_lines <- Lines(config_1, ID = config_1@Corridor_ID)
config_1_lines <- Lines(list(config_1), ID = config_1@Corridor_ID)
config_1_line <- Line(config_1, ID = config_1@Corridor_ID)
config_1_line <- Line(config_1)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Rnode_lat, Rnode_lon, Corridor_ID)
config_split <- split(config_ln, config_ln$Corridor_ID)
config_1 <- config_split[[1]]
config_1_line <- Line(config_1)
config_1_line <- Line(matrix(config_1))
View(config_1)
config_1 <- config_split[[1]] %>% dplyr::select(-Corridor_ID)
config_1_line <- Line(config_1)
config_1_line
config_lines <- vector("list", length = length(corridor_split))
config_lines <- vector("list", length(config_split))
map(config_split, function(i) {
config_1 <- config_split[[i]] %>% dplyr::select(-Corridor_ID)
config_lines[[i]] <- Line(config_1)
})
map(1:length(config_split), function(i) {
config_1 <- config_split[[i]] %>% dplyr::select(-Corridor_ID)
config_lines[[i]] <- Line(config_1)
})
create_line <- function(i) {
config_1 <- config_split[[i]] %>% dplyr::select(-Corridor_ID)
config_lines[[i]] <<- Line(config_1)
}
map(1:length(config_split), create_line)
arg_length <- c(1:length(config_split))
config_line <- map(arg_length, create_line)
config_1 <- config_line[[1]]
config_lines[[1]] <- Lines(config_1, ID = c(config_split[[1]]))
config_lines[[1]] <- Lines(config_1, ID = c(config_split[[1]] %>% dplyr::select(Corridor_ID)))
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_line[[i]] <- Lines(config_1, ID = c(config_split[[i]] %>% dplyr::select(Corridor_ID)))
}
config_lines <- map(arg_length, create_lines_id)
View(config_lines)
config_lines <- vector("list", length(config_line))
config_lines <- map(arg_length, create_lines_id)
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = c(config_split[[i]] %>% dplyr::select(Corridor_ID)))
}
config_lines <- vector("list", length(config_line))
# Add ID to Line object
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = c(config_split[[i]] %>% dplyr::select(Corridor_ID)))
}
config_lines <- map(arg_length, create_lines_id)
config_lines_sp <- SpatialLines(config_lines)
config_lines_sp@proj4string
config_lines_crs <- spTransform(config_lines_sp, CRS("+init=epsg:4267"))
config_lines_sp <- CRS("+init=epsg:4267")
config_lines_sp <- SpatialLines(config_lines)
config_lines_sp@proj4string <- CRS("+init=epsg:4267")
config_lines_sp@proj4string
plot(config_lines_sp)
library(tidyverse)
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Rnode_lon, Rnode_lat, Corridor_ID)
config_split <- split(config_ln, config_ln$Corridor_ID)
config_line <- vector("list", length(config_split))
arg_length <- c(1:length(config_split))
create_line <- function(i) {
config_1 <- config_split[[i]] %>% dplyr::select(-Corridor_ID)
config_line[[i]] <<- Line(config_1)
}
# Create line object
config_line <- map(arg_length, create_line)
config_lines <- vector("list", length(config_line))
# Add ID to Line object
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = c(config_split[[i]] %>% dplyr::select(Corridor_ID)))
}
config_lines <- map(arg_length, create_lines_id)
config_lines_sp <- SpatialLines(config_lines)
config_lines_sp@proj4string <- CRS("+init=epsg:4267")
config_lines_sp@proj4string
plot(config_lines_sp)
writeOGR(config_lines_sp, "Configuration Data", "Configuration Test", "ESRI Shapefile")
config_spldf <- SpatialLinesDataFrame(config_lines_sp)
View(config_ln)
config_df <- config %>%
mutate(Corridor_ID = paste(Corridor_route, Corridor_dir, Corridor_category))
View(config_df)
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "Corridor_ID")
config_df <- config %>%
mutate(Corridor_ID = paste(Corridor_route, Corridor_dir, Corridor_category)) %>%
select(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category, Detector_name) %>%
unique() %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", "))
View(config_df)
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "Corridor_ID")
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", "))
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "Corridor_ID")
dfr <- data.frame(id = c("hwy1", "hwy2"), # note how we use the same IDs from above!
cars_per_hour = c(78, 22))
View(dfr)
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", ")) %>%
data.frame()
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "Corridor_ID")
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", ")) %>%
data.frame(rownames = Corridor_ID)
config_rows <- data.frame(rownames = configCorridor_ID)
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", "))
config_rows <- data.frame(rownames = config_df$Corridor_ID)
View(config_rows)
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", "))
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.Corridor_ID = "Corridor_ID")
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", ")) %>%
rename(ID = Corridor_ID)
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "ID")
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", ")) %>%
rename(ID = Corridor_ID) %>%
as.data.frame()
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "ID")
View(config_lines_sp)
config_lines <- vector("list", length(config_line))
# Add ID to Line object
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = config_split[[i]] %>% dplyr::select(Corridor_ID))
}
config_lines <- map(arg_length, create_lines_id)
View(config_lines_sp)
config_lines <- vector("list", length(config_line))
# Add ID to Line object
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = config_df %>% slice(i) %>% dplyr::select(Corridor_ID))
}
config_lines <- map(arg_length, create_lines_id)
config_lines <- vector("list", length(config_line))
# Add ID to Line object
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = config_df %>% slice(i) %>% dplyr::select(ID))
}
config_lines <- map(arg_length, create_lines_id)
View(config_lines)
config_lines_sp <- SpatialLines(config_lines)
View(config_lines_sp)
config_lines_sp <- SpatialLines(list(config_lines))
config_lines <- vector("list", length(config_line))
# Add ID to Line object
create_lines_id <- function(i) {
config_1 <- config_line[[i]]
config_lines[[i]] <- Lines(config_1, ID = config_df %>% slice(i) %>% dplyr::select(ID))
}
config_lines <- map(arg_length, create_lines_id)
config_lines_sp <- SpatialLines(list(config_lines))
config_lines_sp <- SpatialLines(config_lines)
config_spldf <- SpatialLinesDataFrame(config_lines_sp, config_df, match.ID = "ID")
config_lines_spldf@proj4string <- CRS("+init=epsg:4267")
config_spldf@proj4string <- CRS("+init=epsg:4267")
plot(config_spldf)
writeOGR(config_spldf, "Configuration Data", "Configuration Test.shp", "ESRI Shapefile")
View(config_spldf)
config_spldf@CRS <- CRS("+init=epsg:4267")
CRS(config_spldf)
bbox(config_spldf)
proj4string(config_spldf)
config_df <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
group_by(Corridor_ID) %>%
summarize(Detectors = paste(Detector_name, collapse = ", ")) %>%
rename(ID = Corridor_ID) %>%
as.data.frame()
config_ln <- config %>%
unite(Corridor_ID, Corridor_route, Corridor_dir, Corridor_category) %>%
dplyr::select(Rnode_lon, Rnode_lat, Corridor_ID)
config_split <- split(config_ln, config_ln$Corridor_ID)
config_line <- vector("list", length(config_split))
arg_length <- c(1:length(config_split))
create_line_st <- function(i) {
config_1 <- config_split[[i]] %>% dplyr::select(-Corridor_ID)
config_line[[i]] <- st_linestring(config_1)
}
# Create line object
config_line <- map(arg_length, create_line_st)
config_1 <- config_split[[1]] %>% dplyr::select(-Corridor_ID)
config_1 <- as.matrix(config_split[[1]] %>% dplyr::select(-Corridor_ID))
View(config_1)
config_line <- vector("list", length(config_split))
arg_length <- c(1:length(config_split))
create_line_st <- function(i) {
config_1 <- as.matrix(config_split[[i]] %>% dplyr::select(-Corridor_ID))
config_line[[i]] <- st_linestring(config_1)
}
# Create line object
config_line <- map(arg_length, create_line_st)
View(config_line)
(ln_strg <- st_sfc(config_line))
View(ln_strg)
lnstr_sfg1 <- st_linestring(matrix(runif(6), ncol=2))
lnstr_sfg2 <- st_linestring(matrix(runif(6), ncol=2))
(lnstr_sfc <- st_sfc(lnstr_sfg1, lnstr_sfg2))
View(lnstr_sfc)
(lnstr_sf <- st_sf(dfr , lnstr_sfc))
View(lnstr_sf)
(config_sf <- st_sf(config_df, ln_strg))
View(config_sf)
config_sf@proj4string <- CRS("+init=epsg:4267")
st_write(config_sf, "Configuration Data/Config Sf Test.shp")
my_sf_object <- st_as_sf(config, coords = c(config$Rnode_lat, config$Rnode_lon))
my_sf_object <- st_as_sf(config, coords = c(config$Rnode_lon, config$Rnode_lat))
View(config)
?st_as_sf
my_sf_object <- st_as_sf(config, coords = c(Rnode_lat, Rnode_lon))
my_sf_object <- st_as_sf(config, coords = c(config$Rnode_lat, config$Rnode_lon))
plot(config_spldf)
install.packages("inlabru")
library(inlabru)
lns = data.frame(xs = c(1,2,3), ys = c(1,1,1), # start points
xe = c(2,3,4), ye = c(2,2,2))
View(lns)
config_stations <- detector_rnode_corrs_tidy_ii %>%
filter(Rnode_n_type == "Station")
config_stations <- config %>%
filter(Rnode_n_type == "Station")
# Conflate lanes so they have the same upstream detector; create index
config_conflated <- detector_rnode_corrs_tidy_ii %>%
filter(Rnode_n_type == "Station") %>%
select(Corridor_route, Corridor_dir, Corridor_category, Rnode_lat, Rnode_lon) %>%
unique() %>%
group_by(Corridor_route, Corridor_dir, Corridor_category) %>%
mutate(Corridor_conflated_index = row_number())
config_conflated <- config %>%
filter(Rnode_n_type == "Station") %>%
select(Corridor_route, Corridor_dir, Corridor_category, Rnode_lat, Rnode_lon) %>%
unique() %>%
group_by(Corridor_route, Corridor_dir, Corridor_category) %>%
mutate(Corridor_conflated_index = row_number())
# Join index to full dataset
config_pre_lag <- left_join(config_stations, config_conflated, by = c("Corridor_route", "Corridor_dir", "Corridor_category", "Rnode_lat", "Rnode_lon"))
# Create lagged index in order to connect lat/longs of upstream detector to detector of interest
config_lag <- config_conflated %>%
ungroup() %>%
mutate(Corridor_conflated_index = Corridor_conflated_index - 1) %>%
rename(Rnode_lat_upstream = Rnode_lat,
Rnode_lon_upstream = Rnode_lon)
# Join upstream detectors to full detector dataset
config_full <- left_join(config_pre_lag, config_lag, by = c("Corridor_route", "Corridor_conflated_index", "Corridor_dir", "Corridor_category"))
View(config_full)
spl = sline(lns, start.cols = c("xs","ys"),
end.cols = c("xe","ye"))
# Plot the lines
ggplot() + gg(spl)
config_sline <- config %>%
filter(!is.na(Rnode_lat_upstream) & !is.na(Rnode_lon_upstream))
config_sline <- config_full %>%
filter(!is.na(Rnode_lat_upstream) & !is.na(Rnode_lon_upstream))
spl <- sline(config, start.cols = c("Rnode_lat", "Rnode_lon"),
end.cols = c("Rnode_lat_upstream", "Rnode_lon_upstream"))
spl <- sline(config_sline, start.cols = c("Rnode_lat", "Rnode_lon"),
end.cols = c("Rnode_lat_upstream", "Rnode_lon_upstream"))
# Plot the lines
ggplot() + gg(spl)
spl <- sline(config_sline, start.cols = c("Rnode_lon", "Rnode_lat"),
end.cols = c("Rnode_lon_upstream", "Rnode_lat_upstream"))
# Plot the lines
ggplot() + gg(spl)
View(spl)
proj4string(spl) <- CRS("+init=epsg:4267")
proj4string(spl)
# Plot the lines
ggplot() + gg(spl)
writeOGR(spl, "Configuration Data", "Sline test", "ESRI Shapefile")
library(data.table)
library(tidyverse)
corr <- fread("Measures by Corridor/T.H.252 Measures.csv")
View(corr)
library(lubridate)
corr_w_month <- corr[, Month := substring(Date, 5, 6)]
corr_day_type <- corr_w_month[, Day_type := wday(ymd(Date))]
View(corr_day_type)
corr_day_type <- corr_w_month[, Day_type := wday(ymd(Date), label = T)]
corr_day_type <- corr_w_month[, Day_type := wday(ymd(Date), abbr = T)]
View(corr_day_type)
corr_day_type <- corr_w_month[, Day_type := wday(ymd(Date), abbr = T, label = T)]
View(corr_day_type)
corr_day_wk <- corr_w_month[, Day_type := wday(ymd(Date), abbr = T, label = T)]
corr_day_wk <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")]
View(corr_day_wk)
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Hour_of_day := hour(Start_time)]
View(corr_day)
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Hour_of_day := hour(substring(Start_time, 12, 19))]
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Hour_of_day := substring(Start_time, 12, 19)]
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Time_start := substring(Start_time, 12, 19)][, Start_hour := hour(hms(Time_start))]
View(corr_day)
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))]
View(corr_day)
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Peak := ifelse(Start_hour >= 6 & Start_hour <= 10, "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7, "PM Peak (3-7 PM)"))]
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Peak := ifelse(Start_hour >= 6 & Start_hour <= 10, "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7, "PM Peak (3-7 PM)", "Other"))]
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Peak := ifelse(Start_hour >= 6 & Start_hour <= 10, "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7, "PM Peak (3-7 PM)", "Non-peak"))]
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Peak := ifelse(Start_hour >= 6 & Start_hour <= 10 & Day_type == "Weekday", "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7 & Day_type == "Weekday", "PM Peak (3-7 PM)", "Non-peak"))]
corr_day <- corr_w_month[, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Time_of_day := ifelse(Start_hour >= 6 & Start_hour <= 10 & Day_type == "Weekday", "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7 & Day_type == "Weekday", "PM Peak (3-7 PM)", "Weekends & Non-peak on Weekdays"))]
# Create month variable; create Time_of_day variable that returns categories "AM Peak", "PM Peak" & "Weekend & Non-peak"
corr_categories <- corr[, Month := substring(Date, 5, 6)][, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Time_of_day := ifelse(Start_hour >= 6 & Start_hour <= 10 & Day_type == "Weekday", "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7 & Day_type == "Weekday", "PM Peak (3-7 PM)", "Weekends & Non-peak on Weekdays"))]
corr_sum <- corr_categories[,
.(Delay_sum = sum(Delay, na.rm = T),
VMT_sum = sum(VMT, na.rm = T),
Volume_sum = sum(Volume_with_interpolation, na.rm = T)),
by = .(Sensor, Month, Time_of_day)]
View(corr_sum)
corr_month_attr <- corr_sum[, Month := as.numeric(Month)][, Month_abb := month.abb[Month]]
View(corr_month_attr)
fwrite(corr_month_attr, "Measures by Month/T.H.252 Measures by Month.csv")
# Create month variable; create Time_of_day variable that returns categories "AM Peak", "PM Peak" & "Weekend & Non-peak"
corr_categories <- corr[, Month := substring(Date, 5, 6)][, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Time_of_day := ifelse(Start_hour >= 6 & Start_hour <= 10 & Day_type == "Weekday", "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7 & Day_type == "Weekday", "PM Peak (3-7 PM)", ifelse(Day_type == "Weekend", "Weekend", "Non-peak on Weekdays")))]
options(scipen = 999)
corr_sum <- corr_categories[,
.(Delay_sum = sum(Delay, na.rm = T),
VMT_sum = sum(VMT, na.rm = T),
Volume_sum = sum(Volume_with_interpolation, na.rm = T)),
by = .(Sensor, Month, Time_of_day)]
corr_month_attr <- corr_sum[, Month := as.numeric(Month)][, Month_abb := month.abb[Month]]
fwrite(corr_month_attr, "Measures by Month/T.H.252 Measures by Month.csv")
library(lubridate)
library(data.table)
library(tidyverse)
# corr <- fread("Measures by Corridor/T.H.252 Measures.csv")
#
# # Create month variable; create Time_of_day variable that returns categories "AM Peak", "PM Peak" & "Weekend & Non-peak"
# corr_categories <- corr[, Month := substring(Date, 5, 6)][, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Time_of_day := ifelse(Start_hour >= 6 & Start_hour <= 10 & Day_type == "Weekday", "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7 & Day_type == "Weekday", "PM Peak (3-7 PM)", ifelse(Day_type == "Weekend", "Weekend", "Non-peak on Weekdays")))]
#
# options(scipen = 999)
# corr_sum <- corr_categories[,
#                                .(Delay_sum = sum(Delay, na.rm = T),
#                                VMT_sum = sum(VMT, na.rm = T),
#                                Volume_sum = sum(Volume_with_interpolation, na.rm = T)),
#                              by = .(Sensor, Month, Time_of_day)]
#
# corr_month_attr[[i]] <- corr_sum[, Month := as.numeric(Month)][, Month_abb := month.abb[Month]]
setwd("N:/CommDev/Research/Public/MTS/Metro Loop Detectors/Measures by Corridor/")
file_list <- list.files(pattern = "*.csv")
corr_month_attr <- vector("list", length(file_list)) # Set the list at length of file_list
for(i in file_list) {
corr <- fread(paste0("N:/CommDev/Research/Public/MTS/Metro Loop Detectors/Measures by Corridor/", i))
# Create month variable; create Time_of_day variable that returns categories "AM Peak", "PM Peak" & "Weekend & Non-peak"
corr_categories <- corr[, Month := substring(Date, 5, 6)][, Day := wday(ymd(Date), abbr = T, label = T)][, Day_type := ifelse(Day == "Sun" | Day == "Sat", "Weekend", "Weekday")][, Start_hour := hour(hms(substring(Start_time, 12, 19)))][, Time_of_day := ifelse(Start_hour >= 6 & Start_hour <= 10 & Day_type == "Weekday", "AM Peak (6-10 AM)", ifelse(Start_hour >= 3 & Start_hour <= 7 & Day_type == "Weekday", "PM Peak (3-7 PM)", ifelse(Day_type == "Weekend", "Weekend", "Non-peak on Weekdays")))]
options(scipen = 999)
corr_sum <- corr_categories[,
.(Delay_sum = sum(Delay, na.rm = T),
VMT_sum = sum(VMT, na.rm = T),
Volume_sum = sum(Volume_with_interpolation, na.rm = T)),
by = .(Sensor, Month, Time_of_day)]
corr_month_attr[[i]] <- corr_sum[, Month := as.numeric(Month)][, Month_abb := month.abb[Month]]
}
network_month <- do.call(rbind, corr_month_attr)
fwrite(network_month, "Measures by Month/2018 Network Measures with Categories.csv")
fwrite(network_month, "Measures by Month/2018 Network Measures with Categories.csv")
